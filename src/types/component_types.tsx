declare type AbstractTeamType = {
    setStarting: (starting: any[]) => void,
    setBench: (bench: any[]) => void,
    setBudget: (budget:  number) => void,
    setTeamName:  (name: string) => void,
    setCaptainId: (captainId: number) => void,
    setActivePositionFilter:  (positionId: number) => void,
    isPickAble: (player: Player, transferPick?: boolean) => any,
    isSwapAble: (player: Player) => any,
    onTeamSave: () => Promise<any>,
    onTeamReset: (team: any) => Promise<any>,
    onTeamNameChange: (name: string) => void,
    onCaptainSelect: (player: Player) => void,
    onViceCaptainSelect: (player: Player, captainFirstInList?: boolean) => void,
    removeBenchPlayer: (player: Player) => void,
    removeStartingPlayer: (player: Player) => void,
    removePlayer: (player: Player) => void,
    pickPlayer: (player: Player) => void,
    activePositionFilter?: any,
    starting?: any[],
    bench?: any[],
    captainId?: number , 
    viceCaptainId?: number ,
    teamName?: string,
    budget?: number,
    //: league?s=any,
    savingTeamPending?: boolean,
    swapPlayerId?: any,
    swappedFrom?: string | null,
    //: initializedExternally={,
    visibleWeekId: number | null,
    teamNameChanged?: boolean,
    //: teamPointsInfo={,
    draftTransfers?: Transfer[],
    //: deadlineWeekTransfers={,
    //: pastTransfers={,
    initTeamState: (starting: any[], bench: any[], teamName: string, budget: number, captainId?: number, viceCaptainId?: number, teamUser?: any) => void,
    //: activateCacheChanges,
    resetTeamName: () => void,
    onTeamNameUpdate: (teamId: number) => void,
    onTeamEdit: (team: any) => void,
    onTeamSelectionsUpdate: (teamId: number, weekId: number) => void,
    //: onDayChange,
    onPlayerSwap: (player: Player) => void,
    loadAllMatches: () => void,
    possibleFormation: () => any,
    onTransferPlayerOut: (player: Player, extra?: boolean) => void,
    onDraftTransfersClear: () => void,
    onTransferPlayerIn: (player: Player) => void,
    onTransfersSubmit: (teamId: number) => void,
    onTransfersReset: (teamId: number) => void,
    //: boosters={,
    //: isTeamOwner={,
    reloadUserTeams: () => void,
    teamUser?: any,
}